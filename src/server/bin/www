#!/usr/bin/env node

'use strict';
/**
 * Module dependencies.
 */
const core = require('../modules/core');

const app = require('../app');
const debug = require('debug')('jonblog:server');
const http = require('http');
const config = core.config;
const db = core.connection;

var server = null;

config.loadEnv()
  .then(function (result) {
    console.log(result);
    app.set('port', config.getPort());
    return db.open();
  })
  .then(function(result) {

    console.log('Conectado com sucesso.');
    console.log('Iniciando o server.');
    /**
     * Create HTTP server.
     */
    server = http.createServer(app);


    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(config.getPort());
    server.on('error', onError);
    server.on('listening', onListening);

  })
  .catch(function (err) {
    if (err.code === 'ENOENT') {
      console.log('Arquivo de configuração não encontrado.');
      console.log('Deve ser criado na raiz do projeto com o nome ".env".');
    }
    else if (err.errno === -1945) {
      console.log('Não foi possível conectar.');
      console.log('Motivo: '+ err.message);
    }
    else
      console.log(err);
    process.exit();
  })


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + config.getPort()
    : 'Port ' + config.getPort();

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
